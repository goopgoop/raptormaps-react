{"ast":null,"code":"import axios from \"axios\";\nexport default class API {\n  static getInstance() {\n    if (API.instance == null) {\n      API.instance = new API();\n    }\n\n    return API.instance;\n  }\n\n  constructor() {\n    this.axiosInstance = void 0;\n    this.axiosInstance = axios.create({\n      baseURL: \"http://localhost:4000/\",\n      timeout: 1000\n    });\n  }\n\n  async getTechnicians(solarFarmId) {\n    try {\n      const res = await this.axiosInstance.get(`/api/v1/solar_farms/${solarFarmId}/technicians`);\n      return res.data;\n    } catch (error) {\n      throw error.response.data.errors[0];\n    }\n  }\n\n  async randomizeTechnicianPositions(solarFarmId, techs) {\n    let minMaxLong = [10000, -10000];\n    let minMaxLat = [10000, -10000];\n\n    for (const ind in techs) {\n      let coordinates = techs[ind].coordinates;\n      minMaxLong[0] = Math.min(minMaxLong[0], coordinates[0]);\n      minMaxLong[1] = Math.max(minMaxLong[1], coordinates[0]);\n      minMaxLat[0] = Math.min(minMaxLat[0], coordinates[1]);\n      minMaxLat[1] = Math.max(minMaxLat[1], coordinates[1]);\n    }\n\n    for (const ind in techs) {\n      techs[ind].coordinates = [this.randomFloat(minMaxLong[0], minMaxLong[1]), this.randomFloat(minMaxLat[0], minMaxLat[1])];\n    }\n\n    return await this.updateTechnicians(solarFarmId, techs);\n  }\n\n  async updateTechnicians(solarFarmId, techs) {\n    const res = await this.axiosInstance.post(`/api/v1/solar_farms/${solarFarmId}/techniciansMoved`, JSON.stringify(techs), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return res.data;\n  }\n\n  randomFloat(min, max) {\n    return Math.random() * (max - min + 1) + min;\n  }\n\n}\nAPI.instance = void 0;","map":{"version":3,"sources":["C:/Users/Dhruv Gupta/Documents/Job/raptormapstest2/raptormaps-react/raptormaps-client/src/api.ts"],"names":["axios","API","getInstance","instance","constructor","axiosInstance","create","baseURL","timeout","getTechnicians","solarFarmId","res","get","data","error","response","errors","randomizeTechnicianPositions","techs","minMaxLong","minMaxLat","ind","coordinates","Math","min","max","randomFloat","updateTechnicians","post","JSON","stringify","headers","random"],"mappings":"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","sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\nimport { Technician } from \"./map/maprender\";\r\n\r\n\r\nexport default class API {\r\n    axiosInstance : AxiosInstance;\r\n    static instance;\r\n\r\n    static getInstance() : API {\r\n        if(API.instance == null) {\r\n            API.instance = new API();\r\n        }\r\n        return API.instance;\r\n    }\r\n\r\n    constructor() \r\n    {\r\n        this.axiosInstance = axios.create({\r\n            baseURL: \"http://localhost:4000/\",\r\n            timeout: 1000\r\n        });\r\n    }\r\n\r\n    async getTechnicians(solarFarmId : number) {\r\n        try {\r\n            const res : AxiosResponse = await this.axiosInstance.get(`/api/v1/solar_farms/${solarFarmId}/technicians`);\r\n            return res.data;\r\n        } catch(error) {\r\n            throw error.response.data.errors[0];\r\n        }\r\n    }\r\n\r\n    async randomizeTechnicianPositions(solarFarmId : number, techs : Technician[]) {\r\n        let minMaxLong : number[] = [10000, -10000];\r\n        let minMaxLat : number[] = [10000, -10000];\r\n        for(const ind in techs) {\r\n            let coordinates = techs[ind].coordinates;\r\n            minMaxLong[0] = Math.min(minMaxLong[0], coordinates[0]);\r\n            minMaxLong[1] = Math.max(minMaxLong[1], coordinates[0]);\r\n            minMaxLat[0] = Math.min(minMaxLat[0], coordinates[1]);\r\n            minMaxLat[1] = Math.max(minMaxLat[1], coordinates[1]);\r\n        }   \r\n        for(const ind in techs) {\r\n            techs[ind].coordinates = [this.randomFloat(minMaxLong[0], minMaxLong[1]), this.randomFloat(minMaxLat[0], minMaxLat[1])];\r\n        }   \r\n        return await this.updateTechnicians(solarFarmId, techs);\r\n    }\r\n\r\n    async updateTechnicians(solarFarmId : number, techs : Technician[]) {\r\n        const res : AxiosResponse = await this.axiosInstance.post(`/api/v1/solar_farms/${solarFarmId}/techniciansMoved`, JSON.stringify(techs), {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n        return res.data;\r\n    }\r\n\r\n    randomFloat(min, max) {\r\n        return Math.random() * (max - min + 1) + min;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}