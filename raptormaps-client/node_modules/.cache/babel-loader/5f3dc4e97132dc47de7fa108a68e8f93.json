{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Dhruv Gupta\\\\Documents\\\\Job\\\\raptor-maps-test-repo\\\\raptormaps-react\\\\raptormaps-client\\\\src\\\\map\\\\maprender.tsx\",\n    _s = $RefreshSig$();\n\nimport mapboxgl from 'mapbox-gl';\nimport React, { useEffect, useState } from 'react';\nimport API from '../api';\nimport Utils from './utils';\nimport { store } from 'react-notifications-component';\nimport 'animate.css/animate.min.css';\nimport { Button, CircularProgress, Grid } from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Room } from '@material-ui/icons';\nimport { Settings } from './settings';\nexport default function MapRender() {\n  _s();\n\n  const [lastGetTechnicians, setLastGetTechnicians] = useState([]);\n  const [solarFarmId, setSolarFarmId] = useState(1);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n  const [map, setMap] = useState();\n  const [markers, setMarkers] = useState({});\n  const [requestingData, setRequestingData] = useState(false);\n  const [[errorType, errorMessage], setError] = useState(['', '']);\n  let mapContainer = \"\";\n  let intervalId;\n  let lastTimeUpdated = 0;\n  useEffect(() => {\n    mapboxgl.accessToken = \"pk.eyJ1IjoiZ29vcGl0eWdvb3Bnb29wIiwiYSI6ImNraWRranFtcDFkYjkycG1ndjg3aGZzZGQifQ.xO-MMAxkMbT-o68hcU1xag\";\n    setMap(new mapboxgl.Map({\n      container: mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-115.606391900599817, 32.673693943392962],\n      zoom: 9\n    }));\n  }, []);\n  useEffect(() => {\n    if (!settingsOpen && map && !errorMessage) {\n      intervalId = setInterval(() => {\n        requestUpdatedData();\n      }, 5000);\n      requestUpdatedData();\n    }\n\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n      intervalId = null;\n    };\n  }, [settingsOpen, map, errorMessage]);\n\n  async function requestUpdatedData() {\n    setRequestingData(true);\n\n    try {\n      const getData = await API.getInstance().getTechnicians(solarFarmId);\n\n      if (!getData || !getData[\"features\"]) {\n        setError(['get', 'No data found']);\n        return;\n      }\n\n      if (errorType == 'get') setError(['', '']);\n      const technicians = getData[\"features\"];\n      const currentTime = technicians.length == 0 ? lastTimeUpdated : technicians[0][\"properties\"][\"tsecs\"];\n\n      if (technicians.length === lastGetTechnicians.length && currentTime === lastTimeUpdated) {\n        return;\n      }\n\n      lastTimeUpdated = currentTime;\n      addMarkers(technicians);\n      checkForNotifications(technicians);\n    } catch (err) {\n      setError(['get', err.message ? err.message : err]);\n      console.log(err);\n    } finally {\n      setRequestingData(false);\n    }\n  }\n\n  const addMarkers = technicians => {\n    lastGetTechnicians.length = 0;\n    let namesTaken = {};\n    let bounds = new mapboxgl.LngLatBounds();\n\n    for (let i = 0; i < technicians.length; i++) {\n      const tech = technicians[i];\n      const name = tech[\"properties\"][\"name\"];\n      const bearing = tech[\"properties\"][\"bearing\"];\n      const secs = tech[\"properties\"][\"tsecs\"];\n      const coordinates = tech[\"geometry\"][\"coordinates\"];\n      namesTaken[name] = true;\n\n      if (!markers[name]) {\n        markers[name] = new mapboxgl.Marker().setLngLat([coordinates[0], coordinates[1]]).addTo(map || new mapboxgl.Map());\n      }\n\n      let marker = markers[name];\n      marker.setLngLat([coordinates[0], coordinates[1]]);\n      marker.setPopup(new mapboxgl.Popup().setHTML(`\n                <h3>${name}</h3> \n                <p><strong>Bearing:</strong> ${bearing}</p> \n            `));\n      bounds.extend([coordinates[0], coordinates[1]]);\n      const newTech = {\n        name: name,\n        bearing: bearing,\n        coordinates: coordinates\n      };\n      lastGetTechnicians.push(newTech);\n    }\n\n    let keys = Object.keys(markers);\n\n    for (let ind in keys) {\n      let name = keys[ind];\n\n      if (!namesTaken[name]) {\n        let marker = markers[name];\n        marker.remove();\n        delete markers[name];\n      }\n    }\n\n    setMarkers(markers);\n    setLastGetTechnicians(lastGetTechnicians);\n    if (technicians.length > 0) map.fitBounds(bounds, {\n      padding: 100\n    });\n  };\n\n  const checkForNotifications = (allTechs = []) => {\n    for (let i = 0; i < lastGetTechnicians.length; i++) {\n      for (let j = i + 1; j < lastGetTechnicians.length; j++) {\n        const coord1 = lastGetTechnicians[i].coordinates;\n        const coord2 = lastGetTechnicians[j].coordinates;\n        const tech1Name = allTechs[i][\"properties\"][\"name\"];\n        const tech2Name = allTechs[j][\"properties\"][\"name\"];\n        const dist = Utils.getDistanceFromLatLonInKm(coord1[1], coord1[0], coord2[1], coord2[0]);\n        console.log(\"distance is: \" + dist * 1000);\n\n        if (dist * 1000 <= 304.8) {\n          store.addNotification({\n            title: \"Techncians will meet\",\n            message: `Technicians ${tech1Name} and ${tech2Name} are about to meet. Do with this what you will!`,\n            type: \"info\",\n            insert: \"top\",\n            container: \"top-right\",\n            animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n            animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n            dismiss: {\n              duration: 5000,\n              onScreen: true\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const handleSettingsChanged = settings => {\n    setSettingsOpen(false);\n\n    if (settings.changed) {\n      setSolarFarmId(settings.solarFarmId);\n      requestUpdatedData();\n    }\n  };\n\n  const renderLoading = () => {\n    if (requestingData) {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this);\n    }\n  };\n\n  const renderError = () => {\n    if (errorMessage) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          position: 'fixed',\n          transform: 'translate(-50%, -50%)',\n          left: '50%',\n          top: '50%',\n          zIndex: 1,\n          color: 'red'\n        },\n        children: [\"Error: \", errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [renderError(), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: el => mapContainer = el || '',\n      className: \"mapContainer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        marginLeft: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 1,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setSettingsOpen(true);\n            },\n            startIcon: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 87\n            }, this),\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              API.getInstance().randomizeTechnicianPositions(solarFarmId, lastGetTechnicians);\n            },\n            startIcon: /*#__PURE__*/_jsxDEV(Room, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 145\n            }, this),\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Simulate Position Change\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }, this), renderLoading()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), renderError()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Settings, {\n      isOpen: settingsOpen,\n      currentTechnicians: lastGetTechnicians,\n      solarFarmId: solarFarmId,\n      onSettingsChanged: handleSettingsChanged\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MapRender, \"rJ4jrO23ReB8b4oi/UzyG/vEZ5Y=\");\n\n_c = MapRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapRender\");","map":{"version":3,"sources":["C:/Users/Dhruv Gupta/Documents/Job/raptor-maps-test-repo/raptormaps-react/raptormaps-client/src/map/maprender.tsx"],"names":["mapboxgl","React","useEffect","useState","API","Utils","store","Button","CircularProgress","Grid","SettingsIcon","Room","Settings","MapRender","lastGetTechnicians","setLastGetTechnicians","solarFarmId","setSolarFarmId","settingsOpen","setSettingsOpen","map","setMap","markers","setMarkers","requestingData","setRequestingData","errorType","errorMessage","setError","mapContainer","intervalId","lastTimeUpdated","accessToken","Map","container","style","center","zoom","setInterval","requestUpdatedData","clearInterval","getData","getInstance","getTechnicians","technicians","currentTime","length","addMarkers","checkForNotifications","err","message","console","log","namesTaken","bounds","LngLatBounds","i","tech","name","bearing","secs","coordinates","Marker","setLngLat","addTo","marker","setPopup","Popup","setHTML","extend","newTech","push","keys","Object","ind","remove","fitBounds","padding","allTechs","j","coord1","coord2","tech1Name","tech2Name","dist","getDistanceFromLatLonInKm","addNotification","title","type","insert","animationIn","animationOut","dismiss","duration","onScreen","handleSettingsChanged","settings","changed","renderLoading","renderError","position","transform","left","top","zIndex","color","el","marginTop","marginLeft","randomizeTechnicianPositions"],"mappings":"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","sourcesContent":["import mapboxgl from 'mapbox-gl';\r\nimport React, { useEffect, useState } from 'react';\r\nimport API from '../api';\r\nimport Utils from './utils';\r\nimport {store} from 'react-notifications-component';\r\nimport 'animate.css/animate.min.css';\r\nimport { Button, CircularProgress, Grid } from '@material-ui/core';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { Room } from '@material-ui/icons';\r\nimport { Settings } from './settings';\r\n\r\n\r\ninterface Markers {\r\n    [techName : string] : mapboxgl.Marker\r\n}\r\n\r\nexport interface Technician {\r\n    name : string,\r\n    bearing : number,\r\n    coordinates : number[]\r\n}\r\n\r\nexport default function MapRender() {\r\n    const [lastGetTechnicians, setLastGetTechnicians] = useState<Technician[]>([]);\r\n    const [solarFarmId, setSolarFarmId] = useState<number>(1);\r\n    const [settingsOpen, setSettingsOpen] = useState<boolean>(false);\r\n    const [map, setMap] = useState<mapboxgl.Map>();\r\n    const [markers, setMarkers] = useState<Markers>({});\r\n    const [requestingData, setRequestingData] = useState<boolean>(false);\r\n    const [[errorType, errorMessage], setError] = useState(['', '']);\r\n\r\n   let mapContainer : HTMLElement | string = \"\";\r\n   let intervalId : NodeJS.Timeout | null;\r\n   let lastTimeUpdated : number = 0;\r\n\r\n   useEffect(() => {\r\n        mapboxgl.accessToken = \"pk.eyJ1IjoiZ29vcGl0eWdvb3Bnb29wIiwiYSI6ImNraWRranFtcDFkYjkycG1ndjg3aGZzZGQifQ.xO-MMAxkMbT-o68hcU1xag\";\r\n        setMap(new mapboxgl.Map({\r\n            container: mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [-115.606391900599817, 32.673693943392962],\r\n            zoom: 9\r\n        }));\r\n   }, []);\r\n\r\n   useEffect(() => {\r\n       if(!settingsOpen && map && !errorMessage) {\r\n            intervalId = setInterval(() => {\r\n                requestUpdatedData();\r\n            }, 5000);\r\n            requestUpdatedData();\r\n        }\r\n\r\n        return () => {\r\n            if(intervalId)\r\n                clearInterval(intervalId);\r\n            intervalId = null;\r\n        };\r\n   }, [settingsOpen, map, errorMessage]);\r\n\r\n\r\n   async function requestUpdatedData() {\r\n        setRequestingData(true);\r\n        try {\r\n            const getData = await API.getInstance().getTechnicians(solarFarmId);\r\n            if(!getData || !getData[\"features\"])\r\n            {\r\n                setError(['get', 'No data found']);\r\n                return;\r\n            }\r\n            if(errorType == 'get')\r\n                setError(['', '']);\r\n            \r\n            const technicians = getData[\"features\"];\r\n            const currentTime = technicians.length == 0 ? lastTimeUpdated : technicians[0][\"properties\"][\"tsecs\"];\r\n            if(technicians.length === lastGetTechnicians.length && currentTime === lastTimeUpdated) {\r\n                return;\r\n            }\r\n            lastTimeUpdated = currentTime;\r\n            addMarkers(technicians);\r\n            checkForNotifications(technicians);\r\n        }\r\n        catch(err) {\r\n            setError(['get', err.message ? err.message : err]);\r\n            console.log(err);\r\n        }\r\n        finally {\r\n            setRequestingData(false);\r\n        }\r\n    }\r\n    \r\n    const addMarkers = (technicians : []) => {      \r\n        lastGetTechnicians.length = 0;\r\n        let namesTaken : {[name: string] : boolean} = {};\r\n        let bounds = new mapboxgl.LngLatBounds();\r\n        for(let i = 0; i < technicians.length; i++) {\r\n            const tech = technicians[i];\r\n            const name = tech[\"properties\"][\"name\"];\r\n            const bearing = tech[\"properties\"][\"bearing\"];\r\n            const secs = tech[\"properties\"][\"tsecs\"];\r\n    \r\n            const coordinates : number[] = tech[\"geometry\"][\"coordinates\"];\r\n            namesTaken[name] = true;\r\n\r\n            if(!markers[name]) {\r\n                markers[name] = new mapboxgl.Marker().setLngLat([coordinates[0], coordinates[1]]).addTo(map || new mapboxgl.Map());\r\n            }\r\n    \r\n            let marker : mapboxgl.Marker = markers[name];\r\n            marker.setLngLat([coordinates[0], coordinates[1]]);\r\n            marker.setPopup(new mapboxgl.Popup().setHTML(`\r\n                <h3>${name}</h3> \r\n                <p><strong>Bearing:</strong> ${bearing}</p> \r\n            `));\r\n    \r\n            bounds.extend([coordinates[0], coordinates[1]]);\r\n    \r\n            const newTech : Technician = {name: name, bearing: bearing, coordinates: coordinates};\r\n            lastGetTechnicians.push(newTech);\r\n        }\r\n\r\n        let keys = Object.keys(markers);\r\n        for(let ind in keys) {\r\n            let name = keys[ind];\r\n            if(!namesTaken[name]) {\r\n                let marker : mapboxgl.Marker = markers[name];\r\n                marker.remove();\r\n                delete markers[name];\r\n            }\r\n        }\r\n\r\n        setMarkers(markers);\r\n\r\n        setLastGetTechnicians(lastGetTechnicians);\r\n        if(technicians.length > 0)\r\n            map.fitBounds(bounds, {padding: 100});\r\n    }\r\n    \r\n    const checkForNotifications = (allTechs : [] = []) => {\r\n        for(let i = 0; i < lastGetTechnicians.length; i++) {\r\n            for(let j = i + 1; j < lastGetTechnicians.length; j++) {\r\n                const coord1 = lastGetTechnicians[i].coordinates;\r\n                const coord2 = lastGetTechnicians[j].coordinates; \r\n                const tech1Name = allTechs[i][\"properties\"][\"name\"];\r\n                const tech2Name = allTechs[j][\"properties\"][\"name\"];\r\n                const dist = Utils.getDistanceFromLatLonInKm(coord1[1], coord1[0], coord2[1], coord2[0]);\r\n                console.log(\"distance is: \" + (dist * 1000));\r\n                if(dist * 1000 <= 304.8) {\r\n                    store.addNotification({\r\n                        title: \"Techncians will meet\",\r\n                        message: `Technicians ${tech1Name} and ${tech2Name} are about to meet. Do with this what you will!`,\r\n                        type: \"info\",\r\n                        insert: \"top\",\r\n                        container: \"top-right\",\r\n                        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n                        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n                        dismiss: {\r\n                          duration: 5000,\r\n                          onScreen: true\r\n                        }\r\n                      });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSettingsChanged = (settings) => {\r\n        setSettingsOpen(false);\r\n        if(settings.changed) {\r\n            setSolarFarmId(settings.solarFarmId);\r\n            requestUpdatedData();\r\n        }\r\n    }\r\n\r\n    const renderLoading = () => {\r\n        if(requestingData)\r\n        {\r\n            return (\r\n                <Grid item>\r\n                <CircularProgress color=\"secondary\"/>\r\n                </Grid>\r\n                );   \r\n        }\r\n    }\r\n\r\n    const renderError = () => {\r\n        if(errorMessage) {\r\n            return <h1 style={{position: 'fixed', transform: 'translate(-50%, -50%)', left: '50%', top: '50%', zIndex: 1, color: 'red'}}>Error: {errorMessage}</h1>;\r\n        }\r\n    }\r\n\r\n   return (\r\n       <>\r\n       {\r\n           renderError()\r\n       }\r\n        <div ref={el => mapContainer = el || ''} className=\"mapContainer\" />\r\n        <div style = {{marginTop: '20px', marginLeft: '20px'}}>\r\n                <Grid container spacing = {1}>\r\n                    <Grid item xs={1}>\r\n                        <Button onClick={() => { setSettingsOpen(true); }} startIcon={<SettingsIcon/>} variant=\"contained\" color=\"primary\">\r\n                        Settings\r\n                        </Button>\r\n                    </Grid>\r\n                    \r\n                    <Grid item>\r\n                        <Button onClick={() => { API.getInstance().randomizeTechnicianPositions(solarFarmId, lastGetTechnicians); }} startIcon={<Room/>} variant=\"contained\" color=\"primary\">\r\n                            Simulate Position Change\r\n                        </Button>\r\n                    </Grid>    \r\n                    {\r\n                        renderLoading()\r\n                    }\r\n                </Grid> \r\n                {\r\n                    renderError()\r\n                }    \r\n        </div>\r\n        <Settings isOpen={settingsOpen} currentTechnicians={lastGetTechnicians} \r\n            solarFarmId={solarFarmId}\r\n            onSettingsChanged={handleSettingsChanged} />\r\n     </>\r\n   );\r\n}\r\n\r\n "]},"metadata":{},"sourceType":"module"}