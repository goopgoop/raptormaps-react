{"ast":null,"code":"export default class Utils {\n  static getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n    var R = 6371; // Radius of the earth in km\n\n    var dLat = Utils.deg2rad(lat2 - lat1); // deg2rad below\n\n    var dLon = Utils.deg2rad(lon2 - lon1);\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(Utils.deg2rad(lat1)) * Math.cos(Utils.deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c; // Distance in km\n\n    return d;\n  }\n\n  static deg2rad(deg) {\n    return deg * (Math.PI / 180);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Dhruv Gupta/Documents/Job/raptor-maps-test-repo/raptormaps-react/raptormaps-client/src/map/utils.tsx"],"names":["Utils","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI"],"mappings":"AAAA,eAAe,MAAMA,KAAN,CAAY;AAEvB,SAAOC,yBAAP,CAAiCC,IAAjC,EAAsCC,IAAtC,EAA2CC,IAA3C,EAAgDC,IAAhD,EAAsD;AAClD,QAAIC,CAAC,GAAG,IAAR,CADkD,CACpC;;AACd,QAAIC,IAAI,GAAGP,KAAK,CAACQ,OAAN,CAAcJ,IAAI,GAACF,IAAnB,CAAX,CAFkD,CAEZ;;AACtC,QAAIO,IAAI,GAAGT,KAAK,CAACQ,OAAN,CAAcH,IAAI,GAACF,IAAnB,CAAX;AACA,QAAIO,CAAC,GACHC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GACAI,IAAI,CAACE,GAAL,CAASb,KAAK,CAACQ,OAAN,CAAcN,IAAd,CAAT,IAAgCS,IAAI,CAACE,GAAL,CAASb,KAAK,CAACQ,OAAN,CAAcJ,IAAd,CAAT,CAAhC,GACAO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CADA,GACmBE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAC,CAAd,CAHrB;AAKA,QAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAEN,CAAZ,CAAzB,CAAZ;AACA,QAAIO,CAAC,GAAGX,CAAC,GAAGQ,CAAZ,CAVkD,CAUnC;;AACf,WAAOG,CAAP;AACD;;AAED,SAAOT,OAAP,CAAeU,GAAf,EAAoB;AAClB,WAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAQ,GAAZ,CAAV;AACD;;AAlBoB","sourcesContent":["export default class Utils {\r\n    \r\n    static getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {\r\n        var R = 6371; // Radius of the earth in km\r\n        var dLat = Utils.deg2rad(lat2-lat1);  // deg2rad below\r\n        var dLon = Utils.deg2rad(lon2-lon1); \r\n        var a = \r\n          Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n          Math.cos(Utils.deg2rad(lat1)) * Math.cos(Utils.deg2rad(lat2)) * \r\n          Math.sin(dLon/2) * Math.sin(dLon/2)\r\n          ; \r\n        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n        var d = R * c; // Distance in km\r\n        return d;\r\n      }\r\n      \r\n      static deg2rad(deg) {\r\n        return deg * (Math.PI/180)\r\n      }\r\n}"]},"metadata":{},"sourceType":"module"}